/**
 * Task Management System Backend
 * Using Node.js, Express.js, MongoDB with Mongoose
 * Features: CRUD tasks, authentication with JWT, validation, error handling
 */

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const taskRoutes = require('./routes/tasks');
const authRoutes = require('./routes/auth');
const { errorHandler } = require('./middleware/errorHandler');

require('dotenv').config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/tasks', taskRoutes);
app.use('/api/auth', authRoutes);

// Error handling middleware
app.use(errorHandler);

// MongoDB connection
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/taskmanagement';

mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('MongoDB connected');
  // Start server
  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
})
.catch(err => {
  console.error('MongoDB connection error:', err);
});

import React, { useEffect, useState } from 'react';
import axios from 'axios';

/**
 * Task Management Frontend - Week 2 deliverable
 * Features:
 * - TaskList: Displays tasks with filter options
 * - TaskForm: Create/edit tasks
 * - TaskDetails: Show selected task details
 * - API calls using Axios for CRUD operations
 * - Responsive styling with Tailwind CSS (include Tailwind in index.html)
 */

/**
 * Constants for task status options
 */
const TASK_STATUS = ['Pending', 'In Progress', 'Completed'];

/**
 * TaskForm component for adding/editing a task
 */
function TaskForm({ onSave, onCancel, initialData }) {
  const [title, setTitle] = useState(initialData?.title || '');
  const [description, setDescription] = useState(initialData?.description || '');
  const [status, setStatus] = useState(initialData?.status || 'Pending');
  const [dueDate, setDueDate] = useState(initialData?.dueDate ? initialData.dueDate.split('T')[0] : '');
  const [errors, setErrors] = useState({});

  // Validation before save
  const validate = () => {
    const errs = {};
    if (!title.trim()) errs.title = 'Title is required';
    if (!status) errs.status = 'Status is required';
    if (dueDate && isNaN(Date.parse(dueDate))) errs.dueDate = 'Due date is invalid';
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleSubmit = e => {
    e.preventDefault();
    if (!validate()) return;
    const taskData = {
      title: title.trim(),
      description: description.trim(),
      status,
      dueDate: dueDate ? new Date(dueDate).toISOString() : null,
    };
    onSave(taskData);
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md space-y-4">
      <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
        {initialData ? 'Edit Task' : 'Add New Task'}
      </h2>
      <div>
        <label htmlFor="title" className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
          Title <span className="text-red-600">*</span>
        </label>
        <input
          id="title"
          type="text"
          className={`w-full px-3 py-2 rounded border focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
            errors.title ? 'border-red-500' : 'border-gray-300'
          } dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100`}
          value={title}
          onChange={e => setTitle(e.target.value)}
          maxLength={100}
          placeholder="Enter task title"
          required
        />
        {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
      </div>
      <div>
        <label htmlFor="description" className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
          Description
        </label>
        <textarea
          id="description"
          className="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100"
          value={description}
          onChange={e => setDescription(e.target.value)}
          rows={4}
          placeholder="Optional description"
        />
      </div>
      <div>
        <label htmlFor="status" className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
          Status <span className="text-red-600">*</span>
        </label>
        <select
          id="status"
          className={`w-full px-3 py-2 rounded border focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
            errors.status ? 'border-red-500' : 'border-gray-300'
          } dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100`}
          value={status}
          onChange={e => setStatus(e.target.value)}
          required
        >
          {TASK_STATUS.map(s => (
            <option key={s} value={s}>
              {s}
            </option>
          ))}
        </select>
        {errors.status && <p className="text-red-500 text-sm mt-1">{errors.status}</p>}
      </div>
      <div>
        <label htmlFor="dueDate" className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
          Due Date
        </label>
        <input
          id="dueDate"
          type="date"
          className={`w-full px-3 py-2 rounded border focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
            errors.dueDate ? 'border-red-500' : 'border-gray-300'
          } dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100`}
          value={dueDate}
          onChange={e => setDueDate(e.target.value)}
        />
        {errors.dueDate && <p className="text-red-500 text-sm mt-1">{errors.dueDate}</p>}
      </div>
      <div className="flex justify-end space-x-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 rounded bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-100"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-6 py-2 rounded bg-indigo-600 hover:bg-indigo-700 text-white font-semibold"
        >
          {initialData ? 'Update' : 'Create'}
        </button>
      </div>
    </form>
  );
}

/**
 * TaskDetails component to show detailed info about a selected task
 */
function TaskDetails({ task, onClose }) {
  if (!task) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center p-4 z-50">
      <div className="bg-white dark:bg-gray-900 rounded-lg max-w-lg w-full p-6 relative shadow-lg">
        <button
          aria-label="Close details"
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 text-2xl font-bold"
        >
          &times;
        </button>
        <h3 className="text-2xl font-bold mb-4 text-gray-900 dark:text-gray-100">{task.title}</h3>
        <p className="mb-4 text-gray-700 dark:text-gray-300">{task.description || 'No description provided.'}</p>
        <ul className="text-gray-700 dark:text-gray-300 space-y-1">
          <li><strong>Status:</strong> {task.status}</li>
          <li><strong>Due Date:</strong> {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'No due date set'}</li>
          <li><strong>Created At:</strong> {new Date(task.createdAt).toLocaleString()}</li>
          <li><strong>Last Updated:</strong> {new Date(task.updatedAt).toLocaleString()}</li>
        </ul>
      </div>
    </div>
  );
}

/**
 * TaskList component to display all tasks with selection and deletion
 */
function TaskList({ tasks, onSelect, onDelete, filterStatus, onFilterChange, searchTerm, onSearchChange }) {
  // Filter tasks by status and search term
  const filteredTasks = tasks.filter(task => {
    const matchesStatus = filterStatus === 'All' || task.status === filterStatus;
    const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (task.description && task.description.toLowerCase().includes(searchTerm.toLowerCase()));
    return matchesStatus && matchesSearch;
  });

  return (
    <div className="w-full max-w-3xl bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4">
        <input
          type="text"
          placeholder="Search tasks..."
          value={searchTerm}
          onChange={e => onSearchChange(e.target.value)}
          className="flex-grow px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100"
          aria-label="Search tasks by title or description"
        />
        <select
          value={filterStatus}
          onChange={e => onFilterChange(e.target.value)}
          className="w-48 px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100"
          aria-label="Filter tasks by status"
        >
          <option value="All">All</option>
          {TASK_STATUS.map(status => (
            <option key={status} value={status}>{status}</option>
          ))}
        </select>
      </div>
      <ul role="list" className="divide-y divide-gray-200 dark:divide-gray-700 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 dark:scrollbar-track-gray-800">
        {filteredTasks.length === 0 && <li className="py-4 text-center text-gray-500 dark:text-gray-400">No tasks found.</li>}
        {filteredTasks.map(task => (
          <li
            key={task._id}
            className="flex justify-between items-center py-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded cursor-pointer"
            onClick={() => onSelect(task)}
            role="button"
            tabIndex={0}
            onKeyDown={(e) => { if (e.key === 'Enter') onSelect(task); }}
          >
            <div>
              <p className="text-lg font-medium text-gray-900 dark:text-gray-100">{task.title}</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">{task.status} | Due {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <button
              aria-label={`Delete task ${task.title}`}
              onClick={(e) => {
                e.stopPropagation();
                if (window.confirm(`Are you sure you want to delete task "${task.title}"?`)) {
                  onDelete(task._id);
                }
              }}
              className="text-red-600 hover:text-red-800 dark:hover:text-red-400 focus:outline-none"
            >
              &#10005;
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

/**
 * Main App component
 */
export default function App() {
  const [tasks, setTasks] = useState([]);
  const [selectedTask, setSelectedTask] = useState(null);
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [formInitialData, setFormInitialData] = useState(null);
  const [filterStatus, setFilterStatus] = useState('All');
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Backend base URL assumed
  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/tasks';

  // Fetch tasks from backend
  const fetchTasks = async () => {
    setLoading(true);
    try {
      const response = await axios.get(API_BASE_URL);
      setTasks(response.data);
      setError('');
    } catch (err) {
      setError('Failed to load tasks. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTasks();
  }, []);

  // Create a new task
  const createTask = async (taskData) => {
    setLoading(true);
    try {
      await axios.post(API_BASE_URL, taskData);
      setIsFormVisible(false);
      setFormInitialData(null);
      fetchTasks();
      setError('');
    } catch (err) {
      setError('Failed to create task. Please check the input and try again.');
    } finally {
      setLoading(false);
    }
  };

  // Update existing task
  const updateTask = async (taskData) => {
    if (!formInitialData?._id) return;
    setLoading(true);
    try {
      await axios.put(`${API_BASE_URL}/${formInitialData._id}`, taskData);
      setIsFormVisible(false);
      setFormInitialData(null);
      fetchTasks();
      setSelectedTask(null);
      setError('');
    } catch (err) {
      setError('Failed to update task. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Delete a task
  const deleteTask = async (taskId) => {
    setLoading(true);
    try {
      await axios.delete(`${API_BASE_URL}/${taskId}`);
      if (selectedTask && selectedTask._id === taskId) {
        setSelectedTask(null);
      }
      fetchTasks();
      setError('');
    } catch (err) {
      setError('Failed to delete task. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Handle form save
  const handleFormSave = (taskData) => {
    if (formInitialData) updateTask(taskData);
    else createTask(taskData);
  };

  // Handle form cancel
  const handleFormCancel = () => {
    setIsFormVisible(false);
    setFormInitialData(null);
  };

  // Handle edit task button
  const handleEditTask = () => {
    if (!selectedTask) return;
    setFormInitialData(selectedTask);
    setIsFormVisible(true);
  };

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col items-center p-4 sm:p-8 space-y-8">
      <header className="w-full max-w-6xl flex justify-between items-center mb-4">
        <h1 className="text-4xl font-extrabold bg-gradient-to-r from-indigo-500 to-purple-600 bg-clip-text text-transparent select-none">
          Task Management System
        </h1>
        <button
          onClick={() => { setIsFormVisible(true); setFormInitialData(null); setSelectedTask(null); }}
          className="px-4 py-2 rounded bg-indigo-600 hover:bg-indigo-700 text-white font-semibold focus:outline-none focus:ring-2 focus:ring-indigo-500"
          aria-label="Add new task"
        >
          + Add Task
        </button>
      </header>

      {error && <div className="max-w-3xl w-full bg-red-100 text-red-700 p-3 rounded">{error}</div>}

      {loading && <div className="max-w-3xl w-full text-center">Loading...</div>}

      <main className="flex flex-col lg:flex-row gap-8 max-w-6xl w-full">
        <TaskList
          tasks={tasks}
          onSelect={setSelectedTask}
          onDelete={deleteTask}
          filterStatus={filterStatus}
          onFilterChange={setFilterStatus}
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
        />

        {isFormVisible && (
          <TaskForm
            initialData={formInitialData}
            onSave={handleFormSave}
            onCancel={handleFormCancel}
          />
        )}

        {!isFormVisible && selectedTask && (
          <div className="w-full max-w-md hidden lg:block">
            <TaskDetails task={selectedTask} onClose={() => setSelectedTask(null)} />
            <div className="mt-4 flex justify-between">
              <button
                onClick={handleEditTask}
                className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded font-semibold"
                aria-label="Edit selected task"
              >
                Edit
              </button>
              <button
                onClick={() => {
                  if (window.confirm('Are you sure you want to delete this task?')) {
                    deleteTask(selectedTask._id);
                  }
                }}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded font-semibold"
                aria-label="Delete selected task"
              >
                Delete
              </button>
            </div>
          </div>
        )}
      </main>

      <footer className="text-center text-gray-600 dark:text-gray-400 mt-auto">
        &copy; 2025 Task Management System
      </footer>
    </div>
  );
}

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true, trim: true },
  password: { type: String, required: true },
}, { timestamps: true });

// Pre-save hook to hash password
UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) {
    return next();
  }
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (err) {
    next(err);
  }
});

// Method to compare password
UserSchema.methods.comparePassword = function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', UserSchema);
